rules_version = '2';
service cloud.firestore {
  
  // Allow only authenticated content userUids access
  // then allows users to list tasks they've created
  // then allows users to create a task if they are authenticated
  // then allows users to delete a task if that task is owned by the user
  match /databases/{database}/documents {
    function isCreator() {
        return resource  != null
        		&& isLoggedIn() 
            && resource.data != null
            && request.auth.uid == resource.data.userUid;
      }

    function isLoggedIn() {
        return request.auth != null;
      }
    match /tasks/{task} {
      allow read, write: if isCreator();
      allow list: if isCreator();
      allow create: if isLoggedIn();
      allow delete: if isCreator();
    }
    
    function isUserInOrganization(organizationResource) {
      return request.auth != null
        && organizationResource != null
        && organizationResource.data != null
        && organizationResource.data.UserUids != null
        && request.auth.uid in organizationResource.data.UserUids;
    }
    match /organizations/{organization} {
      // Permit authenticated users to fetch a single organization document so UI can check membership
      // without leaking entire collections. Listing remains restricted to members only.
      allow get: if isLoggedIn();
      allow list: if isUserInOrganization(resource);
      allow create: if isLoggedIn();
      allow update, delete: if isUserInOrganization(resource);
    }
    // Legacy flat collection locked down (no access)
    match /exposureGroups/{exposureGroup} {
      allow read, write: if false;
    }

    // Scoped exposure groups under organization
    match /organizations/{orgId}/exposureGroups/{exposureGroup} {
      // Allow read/write if user is a member of the organization
      allow get, list: if isUserInOrganization(get(/databases/$(database)/documents/organizations/$(orgId)));
      // Create forbids EF fields
      allow create: if isUserInOrganization(get(/databases/$(database)/documents/organizations/$(orgId)))
        && !('LatestExceedanceFraction' in request.resource.data)
        && !('ExceedanceFractionHistory' in request.resource.data);
      // Update forbids client changes to EF fields
      allow update: if isUserInOrganization(get(/databases/$(database)/documents/organizations/$(orgId)))
        && ( !('LatestExceedanceFraction' in request.resource.data) || request.resource.data.LatestExceedanceFraction == resource.data.LatestExceedanceFraction )
        && ( !('ExceedanceFractionHistory' in request.resource.data) || request.resource.data.ExceedanceFractionHistory == resource.data.ExceedanceFractionHistory );
      // Delete
      allow delete: if isUserInOrganization(get(/databases/$(database)/documents/organizations/$(orgId)));
    }
    // Agents under organization
    match /organizations/{orgId}/agents/{agentId} {
      allow get, list: if isUserInOrganization(get(/databases/$(database)/documents/organizations/$(orgId)));
      allow create, update, delete: if isUserInOrganization(get(/databases/$(database)/documents/organizations/$(orgId)));
    }

    match /breakdownTask/{task} {
      allow read, write: if isCreator();
      allow list: if isCreator();
      allow create: if isLoggedIn();
      allow delete: if false;
    }
    match /* {
      allow read, write: if false;
      allow list: if false;
      allow create: if false;
      allow delete: if false;
    }
  }

  
}