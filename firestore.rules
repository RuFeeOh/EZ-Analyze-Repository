rules_version = '2';
service cloud.firestore {
  
  // Allow only authenticated content userUids access
  // then allows users to list tasks they've created
  // then allows users to create a task if they are authenticated
  // then allows users to delete a task if that task is owned by the user
  match /databases/{database}/documents {
    function isCreator() {
        return resource  != null
        		&& isLoggedIn() 
            && resource.data != null
            && request.auth.uid == resource.data.userUid;
      }

    function isLoggedIn() {
        return request.auth != null;
      }
    match /tasks/{task} {
      allow read, write: if isCreator();
      allow list: if isCreator();
      allow create: if isLoggedIn();
      allow delete: if isCreator();
    }
    
    function isUserInOrganization(orgId) {
      return request.auth != null && (
        (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgIds != null &&
          orgId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgIds
        ) || (
          exists(/databases/$(database)/documents/organizations/$(orgId)) &&
          get(/databases/$(database)/documents/organizations/$(orgId)).data.UserUids != null &&
          request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.UserUids
        )
      );
    }
    match /organizations/{organization} {
      // Allow reading an org only if the user is a member on that document.
      allow read: if request.auth != null
        && resource.data != null
        && resource.data.UserUids != null
        && request.auth.uid in resource.data.UserUids;
      // Block direct client writes; organization lifecycle is managed by callables.
      allow create, update, delete: if false;
    }
    // Legacy flat collection locked down (no access)
    match /exposureGroups/{exposureGroup} {
      allow read, write: if false;
    }

    // Scoped exposure groups under organization
    match /organizations/{orgId}/exposureGroups/{exposureGroup} {
      // Allow read/write if user is a member of the organization
      allow get, list: if isUserInOrganization(orgId);
      // Create forbids EF fields
      allow create: if isUserInOrganization(orgId)
        && !('LatestExceedanceFraction' in request.resource.data)
        && !('ExceedanceFractionHistory' in request.resource.data)
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.createdAt == request.time
        && request.resource.data.updatedBy == request.auth.uid
        && request.resource.data.updatedAt == request.time;
      // Update forbids client changes to EF fields
      allow update: if isUserInOrganization(orgId)
        && ( !('LatestExceedanceFraction' in request.resource.data) || request.resource.data.LatestExceedanceFraction == resource.data.LatestExceedanceFraction )
        && ( !('ExceedanceFractionHistory' in request.resource.data) || request.resource.data.ExceedanceFractionHistory == resource.data.ExceedanceFractionHistory );
      // Delete
      allow delete: if isUserInOrganization(orgId);
    }

    // Results subcollection under an exposure group (rows of samples)
    match /organizations/{orgId}/exposureGroups/{exposureGroup}/results/{resultId} {
      allow get, list: if isUserInOrganization(orgId);
      // Members can create rows but must set audit fields and cannot touch EF fields
      allow create: if isUserInOrganization(orgId)
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.createdAt == request.time
        && request.resource.data.updatedBy == request.auth.uid
        && request.resource.data.updatedAt == request.time
        && !('LatestExceedanceFraction' in request.resource.data)
        && !('ExceedanceFractionHistory' in request.resource.data);
      // Update allowed for fixing row values; must keep createdAt/By stable and update audit fields
      allow update: if isUserInOrganization(orgId)
        && request.resource.data.updatedBy == request.auth.uid
        && request.resource.data.updatedAt == request.time
        && !('LatestExceedanceFraction' in request.resource.data)
        && !('ExceedanceFractionHistory' in request.resource.data);
      allow delete: if isUserInOrganization(orgId);
    }
    // Agents under organization
    match /organizations/{orgId}/agents/{agentId} {
      allow get, list: if isUserInOrganization(orgId);
      allow create: if isUserInOrganization(orgId)
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.createdAt == request.time
        && request.resource.data.updatedBy == request.auth.uid
        && request.resource.data.updatedAt == request.time;
      allow update: if isUserInOrganization(orgId)
        && request.resource.data.updatedBy == request.auth.uid
        && request.resource.data.updatedAt == request.time;
      allow delete: if isUserInOrganization(orgId);
    }

    // Audit logs (read-only to clients). Writes come from Cloud Functions service account.
    match /organizations/{orgId}/auditLogs/{logId} {
      allow read: if isUserInOrganization(orgId);
      allow write: if false;
    }

    // Import job progress (read-only for org members). Writes are by Cloud Functions only.
    match /organizations/{orgId}/importJobs/{jobId} {
      allow read: if isUserInOrganization(orgId);
      allow write: if false;
    }

    match /breakdownTask/{task} {
      allow read, write: if isCreator();
      allow list: if isCreator();
      allow create: if isLoggedIn();
      allow delete: if false;
    }
    // End of rules
  }

  
}