rules_version = '2';
service cloud.firestore {
  
  // Allow only authenticated content userUids access
  // then allows users to list tasks they've created
  // then allows users to create a task if they are authenticated
  // then allows users to delete a task if that task is owned by the user
  match /databases/{database}/documents {
    function isCreator() {
        return resource  != null
        		&& isLoggedIn() 
            && resource.data != null
            && request.auth.uid == resource.data.userUid;
      }

    function isLoggedIn() {
        return request.auth != null;
      }
    match /tasks/{task} {
      allow read, write: if isCreator();
      allow list: if isCreator();
      allow create: if isLoggedIn();
      allow delete: if isCreator();
    }
    
    function isUserInOrganization(organizationResource) {
      return true
      && organizationResource.data.UserUids != null
      && request.auth.uid in organizationResource.data.UserUids
    }

    /**
      * use the exposureGroupId from the url to get the exposureGroup, then the organization
      * then the organizationUid to see if the user is in the organization
      * @return {boolean} - True if the user has access, false otherwise
      */
    function doesUserHaveAccessToExposureGroup(exposureGroupId) {
      // get the exposureGroup from the database
      let exposureGroup = get(/databases/$(database)/documents/exposureGroups/$(exposureGroupId));
      // get the organizationUid from the exposureGroup
      let organizationUid = exposureGroup.data.OrganizationUid;
      // get the organization from the database
      let organization = get(/databases/$(database)/documents/organizations/$(organizationUid));
      // check if the user is in the organization
      return isUserInOrganization(organization);
    }

    match /organizations/{organization} {
      allow read: if isUserInOrganization(resource);
      allow write: if isUserInOrganization(resource); 
      allow delete: if isUserInOrganization(resource);
      allow create: if isLoggedIn();
    }
    match /exposureGroups/{exposureGroupId} {
        allow update: if doesUserHaveAccessToExposureGroup(exposureGroupId);
      allow create: if isLoggedIn();
      allow list: if isLoggedIn(); // Allow listing only for logged-in users
      allow read, delete: if resource.data != null
                 && resource.data.get("OrganizationUid", null) != null
                 && isUserInOrganization(get(/databases/$(database)/documents/organizations/$(resource.data.organizationUid)));
    
    }
    match /breakdownTask/{task} {
      allow read, write: if isCreator();
      allow list: if isCreator();
      allow create: if isLoggedIn();
      allow delete: if false;
    }
    match /* {
      allow read, write: if false;
      allow list: if false;
      allow create: if false;
      allow delete: if false;
    }
  }

  
}